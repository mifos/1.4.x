<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
<!-- 
Copyright (c) 2005-2008 Grameen Foundation USA
1029 Vermont Avenue, NW, Suite 400, Washington DC 20005
All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.

See also http://www.apache.org/licenses/LICENSE-2.0.html for an
explanation of the license and how it is applied.
-->                            
<hibernate-mapping>
	<class
		name="org.mifos.application.branchreport.BranchReportClientSummaryBO"
		table="BATCH_CLIENT_SUMMARY">
		<id name="clientSummaryId" column="CLIENT_SUMMARY_ID"
			type="integer" access="field">
			<generator class="native" />
		</id>

		<property name="fieldName" column="FIELD_NAME" type="string"
			access="field" />
		<property name="total" column="TOTAL" type="string"
			access="field" />
		<property name="veryPoorTotal" column="VPOOR_TOTAL"
			type="string" access="field" />

		<many-to-one name="branchReport" column="BRANCH_REPORT_ID" access="field"
			class="org.mifos.application.branchreport.BranchReportBO">
		</many-to-one>
	</class>

	<sql-query
		name="branchReport.getBranchReportClientSummaryForDateAndBranch">
		<load-collection alias="clientSummaries"
			role="org.mifos.application.branchreport.BranchReportBO.clientSummaries" />
		<![CDATA[ SELECT {clientSummaries.*} FROM BATCH_CLIENT_SUMMARY as clientSummaries, 
			BATCH_BRANCH_REPORT as branchReport WHERE 
			branchReport.BRANCH_REPORT_ID=clientSummaries.BRANCH_REPORT_ID 
			AND branchReport.RUN_DATE=:RUN_DATE 
			AND branchReport.BRANCH_ID=:BRANCH_ID
		]]>
	</sql-query>
	
	<sql-query name="branchReport.extractPortfolioAtRiskForBranch">
		<return-scalar column="portfolioAtRisk" type="big_decimal"/>	
		<![CDATA[
				select
				    round(laa1.outstanding_principal/ls1.balance_principal*100.0,3) as portfolioAtRisk
				from
				    (
				        select ifnull(sum(laa.unpaid_principal),0) as outstanding_principal
				            from 
				                loan_arrears_aging laa
				            left join
				                account acc on acc.account_id=laa.account_id
				            left join
				                customer cust on cust.customer_id=acc.customer_id
                            left join
                                customer_state cs on cs.status_id=cust.status_id
				            where
				                acc.account_state_id in (:loanActiveInBadStanding)
                            and
                                cs.description='Customer Was Active'
				            and 
				                cust.customer_level_id=:customerLevelId
				            and
				            	laa.days_in_arrears>=:daysInArrears
				           	and
				           		acc.office_id=:officeId
				     ) laa1,
				     (
				        select ifnull(sum(ls.orig_principal-ls.principal_paid),1) as balance_principal
				            from
				                loan_summary ls
				            left join 
				                account acc on acc.account_id=ls.account_id
				            left join
				                customer cust on cust.customer_id=acc.customer_id
                            left join
                                customer_state cs on cs.status_id=cust.status_id
				            where
				                acc.account_state_id in (:loanActiveInGoodStanding,:loanActiveInBadStanding)
                            and
                                cs.description='Customer Was Active'
				            and
				                cust.customer_level_id=:customerLevelId
				            and
				            	acc.office_id=:officeId
				     ) ls1
		]]>	
	</sql-query>
	<!-- 
	select round(ifnull(sum(unpaid_principal)/(select sum(orig_principal-principal_paid) 
	                      from loan_summary, account where account.office_id=:officeId 
	                      and account.account_id=loan_summary.account_id
	                      and account.account_state_id in (:loanActiveInGoodStanding,:loanActiveInBadStanding))*100.0,0),3)
	        as portfolioAtRisk
	        from loan_arrears_aging, account 
	        where days_in_arrears >= :daysInArrears
	        and loan_arrears_aging.account_id=account.account_id
	        and account.account_state_id in (:loanActiveInGoodStanding,:loanActiveInBadStanding)
	        and account.office_id = :officeId	
	-->
</hibernate-mapping>
